Ext.define('App.view.servidores.ServidorEfetivoForm', {
    extend: 'Ext.form.Panel',
    xtype: 'servidor-efetivo-form',

    bodyPadding: 10,
    defaults: {
        anchor: '100%',
        labelWidth: 120,
        msgTarget: 'side'
    },
    scrollable: true, // Adiciona scroll se o conteúdo for muito grande

    // 1. Habilita o viewModel
    /*viewModel: {
        type: 'default',

        // 2. Links para os modelos (associações)
        links: {
            servidor: {
                type: 'App.model.ServidorEfetivo', // Modelo principal
                create: true // Cria instância se não existir
            },
            pessoa: {
                type: 'App.model.Pessoa', // Modelo associado
                association: 'pessoa',    // Nome da associação definida no modelo ServidorEfetivo
                reference: 'pessoa'       // Nome para referência no binding
            }
        },

        // 3. Dados calculados ou extras (opcional)
        data: {
            tituloJanela: 'Editar Servidor'
        }
    },*/
    viewModel: {
            type: 'default',
            servidor: {
                type: 'App.model.ServidorEfetivo', // Modelo principal
                create: true // Cria instância se não existir
            }
    },
    /*viewModel: {
            type: 'default',
            data:{
                servidor: {
                    type: 'App.model.ServidorEfetivo', // Modelo principal
                    create: true // Cria instância se não existir
                }
            }
    },*/
    /*bind: {
        record: '{servidor}'  // Vínculo com o modelo ServidorEfetivo
    },*/

    items: [
     {
        xtype: 'hiddenfield',
        name: 'matriculaAntiga'
    }, {
        xtype: 'hiddenfield',
        name: 'pessoaAntiga'
    }, {
        xtype: 'fieldset',
        title: 'Dados Funcionais',
        margin: '0 0 10 0',
        defaults: {
            anchor: '100%',
            labelWidth: 120
        },
        items: [{
            xtype: 'textfield',
            name: 'matricula',
            fieldLabel: 'Matrícula',
            allowBlank: false,
            maxLength: 20,
            enforceMaxLength: true,
            bind: '{servidor.matricula}' // Binding direto ao campo do modelo
        }]
    }, {
        xtype: 'fieldset',
        title: 'Dados Pessoais',
        margin: '0 0 10 0',
        items: [{
            xtype: 'tabpanel',
            plain: false,
            height: 400, // Altura fixa para o tabpanel
            defaults: {
                bodyPadding: 10,
                anchor: '100%'
            },
            items: [{
                title: 'Dados Pessoais',
                itemId: 'dadosPessoaisTab',
                layout: 'anchor',
                defaults: {
                    anchor: '100%',
                    labelWidth: 120,
                    msgTarget: 'side'
                },
                items: [
                {
                    xtype: 'textfield',
                    name: 'id',
                    bind: '{servidor.pessoa.id}', // Binding ao modelo associado
                },
                {
                    xtype: 'textfield',
                    name: 'nome',
                    fieldLabel: 'Nome Completo',
                    allowBlank: false,
                    maxLength: 100,
                    enforceMaxLength: true,
                    bind: '{servidor.pessoa.nome}' // Binding ao modelo associado
                }, {
                    xtype: 'datefield',
                    name: 'dataNascimento',
                    fieldLabel: 'Data Nascimento',
                    format: 'd/m/Y',
                    submitFormat: 'Y-m-d',
                    allowBlank: false,
                    maxValue: new Date(),
                    bind: '{servidor.pessoa.dataNascimento}' // Binding ao modelo associado
                }, {
                    xtype: 'combobox',
                    name: 'sexo',
                    fieldLabel: 'Sexo',
                    store: ['Masculino', 'Feminino', 'Outro'],
                    editable: false,
                    allowBlank: false,
                    bind: '{servidor.pessoa.sexo}' // Binding ao modelo associado
                }, {
                    xtype: 'textfield',
                    name: 'mae',
                    fieldLabel: 'Nome da Mãe',
                    maxLength: 100,
                    enforceMaxLength: true,
                    bind: '{servidor.pessoa.mae}' // Binding ao modelo associado
                }, {
                    xtype: 'textfield',
                    name: 'pai',
                    fieldLabel: 'Nome do Pai',
                    maxLength: 100,
                    enforceMaxLength: true,
                    bind: '{servidor.pessoa.pai}' // Binding ao modelo associado
                }]
            }, {
                title: 'Fotos',
                items: [{
                    xtype: 'fileuploadfield',
                    name: 'fotos',
                    fieldLabel: 'Fotos',
                    buttonText: 'Selecionar...',
                    anchor: '100%',
                    buttonConfig: {
                        iconCls: 'x-fa fa-camera'
                    },
                    listeners: {
                        change: function(field, value) {
                            if (value) {
                                var files = field.fileInputEl.dom.files;
                                Ext.getApplication().getController('PessoasController').onFotosSelecionadas(field, files);
                            }
                        }
                    },
                    multiple: true,
                    accept: 'image/*',
                    validator: function(value) {
                        if (value) {
                            var files = this.fileInputEl.dom.files;
                            for (var i = 0; i < files.length; i++) {
                                if (!files[i].type.match('image.*')) {
                                    return 'Apenas arquivos de imagem são permitidos';
                                }
                            }
                        }
                        return true;
                    }
                }, {
                    xtype: 'container',
                    reference: 'thumbnailsContainer',
                    layout: {
                        type: 'table',
                        columns: 3,
                        tdAttrs: {
                            style: 'padding: 5px; vertical-align: top;'
                        }
                    },
                    scrollable: true,
                    height: 400,
                    defaults: {
                        margin: '0 5 5 0'
                    },
                    items: []
                }]
            }, {
                title: 'Endereços',
                items: [{
                    xtype: 'container',
                    layout: 'hbox',
                    margin: '0 0 10 0',
                    items: [{
                        xtype: 'combobox',
                        name: 'enderecoSearch',
                        fieldLabel: 'Buscar Endereço',
                        labelWidth: 100,
                        flex: 1,
                        margin: '0 5 0 0',
                        displayField: 'logradouroCompleto',
                        valueField: 'id',
                        queryMode: 'remote',
                        minChars: 3,
                        typeAhead: true,
                        store: {
                            autoLoad: false,
                            fields: ['id', 'logradouro', 'numero', 'bairro', 'cidade', 'logradouroCompleto'],
                            proxy: {
                                type: 'rest',
                                url: '/protected/api/enderecos/search',
                                reader: {
                                    type: 'json',
                                    rootProperty: 'data'
                                }
                            }
                        },
                        tpl: Ext.create('Ext.XTemplate',
                            '<tpl for=".">',
                            '<div class="x-boundlist-item">',
                            '<div><strong>{logradouro}, {numero}</strong> - {bairro}</div>',
                            '<div style="font-size: smaller; color: #666;">{cidade.nome}/{cidade.uf}</div>',
                            '</div>',
                            '</tpl>'
                        ),
                        displayTpl: Ext.create('Ext.XTemplate',
                            '<tpl for=".">',
                            '{logradouroCompleto}',
                            '</tpl>'
                        ),
                        listeners: {
                            beforequery: function(queryPlan) {
                                queryPlan.query = queryPlan.query.trim();
                            }
                        }
                    }, {
                        xtype: 'button',
                        text: 'Vincular',
                        iconCls: 'x-fa fa-link',
                        handler: function(btn) {
                            var form = btn.up('form');
                            var combo = form.down('combobox[name=enderecoSearch]');
                            var record = combo.getSelection();

                            if (record) {
                                Ext.getApplication().getController('ServidoresController')
                                    .onVincularEndereco(form, record);
                            } else {
                                Ext.Msg.alert('Aviso', 'Selecione um endereço para vincular');
                            }
                        }
                    }]
                }, {
                    xtype: 'grid',
                    title: 'Endereços Vinculados',
                    reference: 'enderecosGrid',
                    flex: 1,
                    store: {
                        autoLoad: false,
                        fields: ['id', 'tipoLogradouro', 'logradouro', 'numero', 'bairro', 'cidade'],
                        data: []
                    },
                    columns: [{
                        text: 'Logradouro',
                        dataIndex: 'logradouro',
                        flex: 2,
                        renderer: function(value, meta, record) {
                            var tipo = record.get('tipoLogradouro') || '';
                            return tipo + ' ' + value;
                        }
                    }, {
                        text: 'Número',
                        dataIndex: 'numero',
                        width: 80
                    }, {
                        text: 'Bairro',
                        dataIndex: 'bairro',
                        flex: 1
                    }, {
                        text: 'Cidade',
                        dataIndex: 'cidade',
                        flex: 1,
                        renderer: function(value) {
                            return value ? value.nome + '/' + value.uf : '';
                        }
                    }, {
                        xtype: 'actioncolumn',
                        width: 50,
                        items: [{
                            iconCls: 'x-fa fa-unlink',
                            tooltip: 'Desvincular endereço',
                            handler: function(grid, rowIndex, colIndex) {
                                var form = grid.up('form');
                                var record = grid.getStore().getAt(rowIndex);
                                Ext.getApplication().getController('ServidoresController')
                                    .onDesvincularEndereco(form, record);
                            }
                        }]
                    }]
                }]
            }]
        }]
    }],

    buttons: [{
        text: 'Salvar',
        formBind: true,
        iconCls: 'x-fa fa-save',
        handler: function(btn) {
            Ext.getApplication().getController('ServidoresController').onSaveServidorEfetivo(btn);
        }
    }, {
        text: 'Cancelar',
        iconCls: 'x-fa fa-times',
        handler: function(btn) {
            Ext.getApplication().getController('ServidoresController').onCancelServidorEfetivo(btn);
        }
    }],

    beforeSave: function() {
        var form = this;

        if (!form.isValid()) {
            Ext.Msg.alert('Erro', 'Por favor, corrija os campos inválidos.');
            return false;
        }

        return true;
    },

    loadRecord: function(record) {
        /*console.log(record.data);
        console.log(record.data['pessoa']);
        console.log(record.data['matricula']);
        this.callParent([record]);*/

        //this.callParent(arguments);

        this.callParent([record]);
        const vm = this.getViewModel();

        // Carrega o registro principal
        vm.set('servidor', record.data);
        // vm.set('data', record.data);

        // Carrega automaticamente a pessoa associada via link
        /*const pessoaRecord = record.data['pessoa'] ? record.data['pessoa'] : null;
        if (pessoaRecord) {
            vm.set('pessoa', pessoaRecord);
        }*/

        // Carrega fotos existentes
        Ext.getApplication().getController('PessoasController')
            .carregarFotosExistente(record.data['pessoa']['id'], this, 'thumbnailsContainer');

        // Carrega endereços vinculados
        Ext.getApplication().getController('PessoasController')
            .carregarEnderecosVinculados(record.data['pessoa']['id'], this);

    }
});